/** * Using Rails-like standard naming convention for endpoints. * GET     /api/line-bots              ->  index */'use strict';// Gets a list of LineBots// export function index(req, res) {//   res.json([]);// }var _ = require('lodash');var request = require('request');var HttpsProxyAgent = require('https-proxy-agent');console.log('LINE BOT API server start');// 発話理解var understandings = function(text, context, callback) {  console.log('understandings: ' + text);  var APP_NAME  = 'HARADATM3'  var API_KEY   = '583055644d503937794e446834707247646d586947534948486a6d2e6c514e6b495242636746615a2e732f';  var ENDPOINT  = 'https://api.apigw.smt.docomo.ne.jp/sentenceUnderstanding/v1/task?APIKEY=' + API_KEY;  var request_data = {    projectKey: 'OSU',    appInfo: {      appName: APP_NAME,      appKey : API_KEY    },    clientVer: '1.0.0',    dialogMode: 'on',    language: 'ja',    userId: '',    location: {      lat: '',      lon: ''    },    userUtterance: {      utteranceText: text    }  };  var options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/x-www-form-urlencoded',    }  }  request.post(options, function(err, response, body) {    if (! err) {      var parse_body = JSON.parse(body);      var command = parse_body.dialogStatus.command.commandName;      callback(command, text, context);    }    else {      console.log('error:' + err.message);      res.status(500);    }  });};// Q&Avar qanda = function(q, callback) {  console.log('qanda: ' + q);  var APP_NAME  = 'HARADATM3'  var API_KEY   = '583055644d503937794e446834707247646d586947534948486a6d2e6c514e6b495242636746615a2e732f';  var ENDPOINT  = 'https://api.apigw.smt.docomo.ne.jp/knowledgeQA/v1/ask?APIKEY=' + API_KEY + '&q=' + encodeURIComponent(q);  var options = {    url: ENDPOINT,    headers: {      'Content-Type': 'application/x-www-form-urlencoded',    }  }  request.get(options, function(err, response, body) {    if (! err) {      var parse_body = JSON.parse(body);      var ans = parse_body.message.textForDisplay;      callback(ans);    }    else {      console.log('error:' + err.message);      res.status(500);    }  });};// 天気var weather = function(city, callback) {  console.log('weather: ' + city);  var ENDPOINT = 'http://weather.livedoor.com/forecast/webservice/json/v1?city=' + city;  var options = {    url: ENDPOINT,    headers: {}  }  request.get(options, function(err, response, body) {    if (! err) {      var parse_body = JSON.parse(body);      var text = parse_body.description.text;      text = text.replace(/\r?\n/g, ' ')      callback(text);    }    else {      console.log('error:' + err.message);      res.status(500);    }  });};// 雑談var dialogue = function(text, context, callback) {  console.log('dialogue: ' + text);  var APP_NAME  = 'HARADATM3'  var API_KEY   = '583055644d503937794e446834707247646d586947534948486a6d2e6c514e6b495242636746615a2e732f';  var ENDPOINT  = 'https://api.apigw.smt.docomo.ne.jp/dialogue/v1/dialogue?APIKEY=' + API_KEY;  var request_data = {    utt: text,    context: context,    nickname: 'シェパ',    nickname_y: 'しぇぱ',    sex: '女',    bloodtype: 'B',    birthdateY: 1997,    birthdateM: 5,    birthdateD: 30,    age: 16,    constellations: '双子座',    place: '東京',    mode: 'dialog'  };  var options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json'    }  }  request.post(options, function(err, response, body) {    if (! err) {      var parse_body = JSON.parse(body);      var utt = parse_body.utt;      var context = parse_body.context;      console.log('after: ' + context);      callback(utt, context);    }    else {      console.log('error:' + err.message);      res.status(500);    }  });};// 画像分類var classify = function(text, callback) {  console.log('classify: ' + text);  var customRequest = request.defaults({'proxy': process.env.FIXIE_URL});  var ENDPOINT  = 'http://49.212.141.136:8088/mlp';  var request_data = {    text: text,    N: '1'  };  var options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json'    }  };  console.log(request_data);  console.log(options);  customRequest.post(options, function(err, response, body) {    if (! err) {      var parse_body = JSON.parse(body);      console.log(parse_body);      var score = parse_body[0].score;      var label = parse_body[0].label;      var url = parse_body[0].url;      console.log('label: ' + label);      console.log('score: ' + score);      console.log('url: ' + url);      callback(label, url);    }    else {      console.log('error:' + err.message);      res.status(500);    }  });};// 文書要約var summarize = function(to, text, res) {  console.log('summarize: ' + text);  var customRequest = request.defaults({'proxy': process.env.FIXIE_URL});  var ENDPOINT  = 'http://49.212.141.136:8088/summarize';  var request_data = {    text: text,    sents: 3,    chars: 99999999  };  var options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json'    }  };  console.log(request_data);  console.log(options);  customRequest.post(options, function(err, response, body) {    if (! err) {      var parse_body = JSON.parse(body);      console.log(parse_body);      var src = parse_body[0].src;      var dest = parse_body[0].dest;      console.log('src: ' + src);      console.log('dest: ' + dest);      console.log(text);      text = dest + 'で、ござるよ。'      sendMessage(to, text, res)    }    else {      console.log('error:' + err.message);      res.status(500);    }  });};// LINE へ応答するvar sendMessage = function(to, text, res) {  var customRequest = request.defaults({'proxy': process.env.FIXIE_URL});  var ENDPOINT  = 'https://api.line.me/v2/bot/message/reply';  var request_data = {    // to: [to],    // toChannel: 1383378250,            // Fixed value    // eventType: '138311608800106203',  // Fixed value    replyToken: to,    messages: [      {        'type' : 'text',        // 'toType' : 1,        'text' : text      }    ]  };  var options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json; charset=UTF-8',      // 'X-Line-ChannelID': process.env.LINE_CHANNEL_ID,      // 'X-Line-ChannelSecret': process.env.LINE_CHANNEL_SECRET,      // 'X-Line-Trusted-User-With-ACL': process.env.LINE_CHANNEL_MID      'Authorization': 'Bearer WCapUK8bNUW4NeL7zdZaDEoYAmi3NOngbk1+AL3dn5K5My4eYTaFASIadVjf4sf8eA2dpfLjjO7CAh1uJnxBa8YMfFDRXKpjSmAd8ghZXS8BoJ/en6kz27zlyHl8DGbAWBbuuWaLQDLiZdG42oLQGAdB04t89/1O/w1cDnyilFU='    }  }  console.log(request_data);  console.log(options);  customRequest.post(options, function(err, response, body) {    console.log('Error: ' + err);    console.log('Response: ' + response);    console.log("Body: "+ body);    res.status(200).json(['OK']);  });};var sendImage = function(to, text, url, res) {  var customRequest = request.defaults({'proxy': process.env.FIXIE_URL});  var ENDPOINT  = 'https://api.line.me/v2/bot/message/reply';  var request_data = {    // 'to' : [to],    // 'toChannel' : 1383378250,            // Fixed value    // 'eventType' : '140177271400161403',  // Fixed value    replyToken: to,    messages: [      {        'type' : 'text',        // 'toType' : 1,        'text' : text      },      {        'type' : 'image',        'originalContentUrl' : url,        'previewImageUrl' : url      }    ]  };  var options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json; charset=UTF-8',      // 'X-Line-ChannelID': process.env.LINE_CHANNEL_ID,      // 'X-Line-ChannelSecret': process.env.LINE_CHANNEL_SECRET,      // 'X-Line-Trusted-User-With-ACL': process.env.LINE_CHANNEL_MID      'Authorization': 'Bearer WCapUK8bNUW4NeL7zdZaDEoYAmi3NOngbk1+AL3dn5K5My4eYTaFASIadVjf4sf8eA2dpfLjjO7CAh1uJnxBa8YMfFDRXKpjSmAd8ghZXS8BoJ/en6kz27zlyHl8DGbAWBbuuWaLQDLiZdG42oLQGAdB04t89/1O/w1cDnyilFU='    }  }  console.log(request_data);  console.log(options);  customRequest.post(options, function(err, response, body) {    console.log('Error: ' + err);    console.log('Response: ' + response);    console.log("Body: "+ body);    res.status(200).json(['OK']);  });};// Get list of botsexports.index = function(req, res) {  // res.json([]);  console.log(req.body);  console.log(req.body.events[0].message);  if (req.body.events[0].message.type != 'image') {    var text = 'こんにちは';    if (req.body.events[0].message.text !== undefined) {      text = req.body.events[0].message.text;    }    var context = '';    // if (req.body.context !== undefined) {    //   context = req.body.context;    // };    console.log('before: ' + context);    var to = '';    if (req.body.events[0].replyToken !== undefined) {      to = req.body.events[0].replyToken;    }    // 発話理解    understandings(text, context, function(command, text, context) {      // Q&A      if (command === 'Q&A') {        qanda(text, function(ans) {          console.log(ans);          text = ans + 'で、ござるな。'          sendMessage(to, text, res)        });      }      // 天気      else if (command === '天気') {        weather('130010', function(text) {          console.log(text);          summarize(to, text, res)        });      }      // 雑談      else {        dialogue(text, context, function(utt, context) {          console.log(utt);          text = utt + 'で、ござるよ。'          sendMessage(to, text, res)        });      }    });  }  else {    var to = '';    if (req.body.events[0].replyToken !== undefined) {      to = req.body.events[0].replyToken;    }    // 画像分類    var text = req.body.events[0].message.id;    // sendMessage(to, 'これ(' + text + ')、さくらが遅くてむり', res);    classify(text, function(label, url) {      console.log(label);      console.log(url);      // text = label + 'で、ござるな。拙者にも描けるでござるよ。ほれっ。'      // sendImage(to, text, url, res);      text = label + 'で、ござるな。'      sendMessage(to, text, res)    });  }};