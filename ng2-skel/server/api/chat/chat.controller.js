/** * Using Rails-like standard naming convention for endpoints. * GET     /api/things              ->  index * POST    /api/things              ->  create * GET     /api/things/:id          ->  show * PUT     /api/things/:id          ->  upsert * PATCH   /api/things/:id          ->  patch * DELETE  /api/things/:id          ->  destroy */'use strict';// Gets a list of LineBots// export function index(req, res) {//   res.json([]);// }const request = require('request');const HttpsProxyAgent = require('https-proxy-agent');const client = require('socket.io-client');console.log('LINE BOT API server start');// LINE へ応答するfunction replyLineMessage(to, text, res) {  const customRequest = request.defaults({'proxy': process.env.FIXIE_URL});  const ENDPOINT  = 'https://api.line.me/v2/bot/message/replyMessage';  const LINE_BEARER = process.env.LINE_BEARER  const request_data = {    // to: [to],    // toChannel: 1383378250,            // Fixed value    // eventType: '138311608800106203',  // Fixed value    replyMessageToken: to,    messages: [      {        'type' : 'text',        // 'toType' : 1,        'text' : text      }    ]  };  const options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json; charset=UTF-8',      // 'X-Line-ChannelID': process.env.LINE_CHANNEL_ID,      // 'X-Line-ChannelSecret': process.env.LINE_CHANNEL_SECRET,      // 'X-Line-Trusted-User-With-ACL': process.env.LINE_CHANNEL_MID      'Authorization': 'Bearer ' + LINE_BEARER    }  }  console.log(request_data);  console.log(options);  customRequest.post(options, function(error, response, body) {    console.log('Status: '+ response.statusCode);    if (error) console.dir(error);    if (body)  console.dir(body);    res.status(200).json(['OK']);  });};// LINE へ送信するfunction sendLineMessage(to, text, res) {  const customRequest = request.defaults({'proxy': process.env.FIXIE_URL});  const ENDPOINT  = 'https://api.line.me/v2/bot/message/push';  const LINE_BEARER = process.env.LINE_BEARER  const request_data = {    // to: [to],    // toChannel: 1383378250,            // Fixed value    // eventType: '138311608800106203',  // Fixed value    to: to,    messages: [      {        'type' : 'text',        // 'toType' : 1,        'text' : text      }    ]  };  const options = {    url: ENDPOINT,    body: JSON.stringify(request_data),    headers: {      'Content-Type': 'application/json; charset=UTF-8',      // 'X-Line-ChannelID': process.env.LINE_CHANNEL_ID,      // 'X-Line-ChannelSecret': process.env.LINE_CHANNEL_SECRET,      // 'X-Line-Trusted-User-With-ACL': process.env.LINE_CHANNEL_MID      'Authorization': 'Bearer ' + LINE_BEARER    }  }  console.log(request_data);  console.log(options);  customRequest.post(options, function(error, response, body) {    console.log('Status: '+ response.statusCode);    if (error) console.dir(error);    if (body)  console.dir(body);    res.status(200).json(['OK']);  });};// Client へ emit するfunction emitMessage(comment) {  const url = 'http://localhost:' + (process.env.PORT || '3000');  const event = 'receive:chat:message';  const socket = client.connect(url);  socket.on('connect', function() {      socket.emit(event, comment);      socket.disconnect();  });};exports.index = function(req, res) {  // res.json([]);  let results;  const CommentModel = require('./comment/comment.model');  CommentModel.find({}, function(err, docs) {    if (err) throw err;    const comments = [];    for (let i in docs) {      comments.push({        user: docs[i].user,        message: docs[i].message,        replyToId: docs[i].replyToId      });    }    res.status(200).json(comments);  });};exports.create = function(req, res) {  // res.json([]);  console.dir(req.body);  let userId = '';  if (req.body.events[0].source.userId !== undefined) {    userId = req.body.events[0].source.userId;  }  let userType = '';  if (req.body.events[0].source.type !== undefined) {    userType = req.body.events[0].source.type;  }  let messageType = '';  if (req.body.events[0].message.type !== undefined) {    messageType = req.body.events[0].message.type;  }  let text = '';  if (messageType === 'text' && req.body.events[0].message.text !== undefined) {    text = req.body.events[0].message.text;  }  let user = {    userId: userId,    userType: userType,    initial: 'L',    name: 'LINE'  };  if (userType !== 'user' && userType !== 'group' && userType !== 'room') {    user.initial = 'O';    user.name = 'Other';  }  let message = {    messageId: (new Date()).getTime().toString(),    messageType: messageType,    content: '',    replyToken: '',    timestamp: new Date(),    answer: ''  };  let comment = {    user: user,    message: message,    replyToId: ''  };  if (text) {    comment.message.content = text;  }  else {    comment.message.content = '[text 以外を受信しました]';  }  emitMessage(comment);  // res.status(200).json(['OK']);  res.status(200).json({    messageId: comment.message.messageId  });};exports.send = function(req, res) {  // res.json([]);  console.dir(req.body);  let userType = '';  if (req.body.user !== undefined) {    userType = req.body.user.userType;  }  let replyToId = '';  if (req.body.replyToId !== undefined) {    replyToId = req.body.replyToId;  }  let text = '';  if (req.body.message !== undefined) {    text = req.body.message.content;  }  if (userType !== 'user' && userType !== 'group' && userType !== 'room') {    console.log('send to LINE');    sendLineMessage(replyToId, text, res);  }  else {    console.log('send to others');  }};